= 单点登陆集成
张雄彪 <zxb@dameng.com>
version 1.0, 2016-07-26
:imagesdir: ./images

_dmcas-client_ 作为 _sso_ 校验中的客户端，用来拦截各子系统发送的请求，在请求抵达子系统前完成用户信息校验工作。

正因为如此， _dmcas-client_ 必须部署在各子系统中，通常也是以一个 _jar_ 包的方式存在。

== 部署使用说明
=== 获取程序包
第三方需要联系 *湖北公安云* 项目组获取 _dmcas-client_ 的程序 _jar_ 包。

=== 编写配置文件
如新建 _cas-client.properties_ 文件。编写如下内容：

.cas-client.properties
[source,java]
----
casURL=http://localhost:8080/dmcas // <1>
loginURL=http://localhost:8080/portal/login.do // <2>
exceptPathPrefix=/ui/;/services/ // <3>
publicPathPrefix=/common/;/portal/;/wmf/casAuth // <4>
----
<1> 指定 _dmcas_ 验证中心的访问地址，请填写实际地址。
<2> 指定用户未登录时访问应用需要跳转到的地址，即配置登陆地址。
<3> 希望加入例外的 _url_ 匹配规则。 *注意，不会获取用户信息，检测为例外请求后，会直接放行。*
<4> 配置为公共请求 _url_ 的匹配规则。 *注意，会尝试获取用信息，不论是否获取得到，只要是公共请求，都会放行。*


=== 配置过滤器
在子系统的 _web.xml_ 文件中添加如下过滤器，请注意 _filter_ 的顺序。具体该 _filter_ 放在哪个位置视各系统而定。

.web.xml
[source,xml]
----
<!-- 单点登录客户端 -->
<filter>
  <filter-name>CASAuthFilter</filter-name>
  <filter-class>com.dm.cas.client.filter.AuthFilter</filter-class>
  <init-param>
    <param-name>configMethod</param-name>
    <param-value>file</param-value> // <1>
  </init-param>
  <init-param>
    <param-name>configFilePath</param-name>
    <param-value>/WEB-INF/config/cas-client.properties</param-value> // <2>
  </init-param>
</filter>
<filter-mapping>
  <filter-name>CASAuthFilter</filter-name>
  <url-pattern>*.do</url-pattern> // <3>
</filter-mapping>
<filter-mapping>
  <filter-name>CASAuthFilter</filter-name>
  <url-pattern>*.html</url-pattern> // <4>
</filter-mapping>
----
<1> 指定为 _file_ 表示从配置文件中读取配置信息。
<2> 指定配置文件的路径，此处应该配 _web_ 工程的相对路径。
<3> 指定请求拦截的 _url_ 规则，例如此处为 *.do
<4> 指定请求拦截的 _url_ 规则，例如此处为 *.html

=== 工具类
获取登陆用户信息

[source,java]
----
User user = CASUtil.getUserInfo(CASAuthID); // <1>
----
<1> _CASAuthID_ 为 _Cookie_ 中的票据信息

== 开发认证节点
在子系统集成至公安云单点系统时，如果需要自己实现登陆过程中的校验逻辑。则需要实现以下接口。

=== 接口
在 _dmcas_ 独立出来以后，暴露了如下一些接口，子系统实现这些接口后， _dmcas_ 将通过 _rpc_ 的方式调用子系统的具体实现来完成校验及其它业务逻辑。

.interfaces
image::dmcas-validation-interface.png[]

AuthService::
校验服务接口，根据用户登录请求的用户名密码，子系统提供校验服务即可。注意，在子系统自己的登陆页面登陆时才会调用该接口。 `必须实现`
+
.AuthService
[source,java]
----
/**
 * 检验用户信息服务
 *
 * @author zxb
 * @version 1.0.1
 */
public interface AuthService {

	/**
	 * 校验用户名密码是否正确
	 *
	 * @param username 用户名
	 * @param password 用户明文密码
	 * @return AuthResult 校验结果
	 * @see com.dm.cas.server.domain.AuthResult
	 */
	public AuthResult validate(String username, String password);

}
----

LoginPostProcessService::
登录成功后的处理接口，子系统实现该接口以便完成一些登陆成功后的处理逻辑。例如，记录登陆日志等。 `可选实现`
+
.LoginPostProcessService
[source,java]
----

/**
 * 用户登录成功后，子系统的处理服务。
 * <p/>
 * 子系统可以实现该接口，以便在用户登录成功后，计入登录日志等信息。
 * @author zxb
 * @version 1.0.1
 * Created by zxb on 2016/3/13.
 */
public interface LoginPostProcessService {

    /**
     * cas验证用户登录成功后，会调用该接口。子类实现该接口后可加入自己的一些处理逻辑。
     * @param params 参数列表
     *               <ul>
     *                  <li>user 登录用户信息</li>
     *                  <li>ip 登录用户客户端ip地址</li>
     *               </ul>
     * @throws Exception
     * @return ReturnMessage 返回的消息，子类如果不返回消息及状态码。cas将使用默认消息及状态码。
     */
    ReturnMessage process(Map<String, Object> params) throws Exception;

}
----

LoginFailProcessService::
登陆失败后的处理逻辑，子系统实现该接口后可在用户登陆失败后加入自己的一些处理逻辑。 `可选实现`
+
.LoginFailProcessService
[source,java]
----
/**
 * @author zxb
 * @version 1.0.1
 * Created by zxb on 2016/3/14.
 */
public interface LoginFailProcessService {

    /**
     * cas验证用户登录失败后，会调用该接口。子类实现该接口后可加入自己的一些处理逻辑。
     * @param params 参数列表
     *               <ul>
     *                  <li>user 登录用户信息</li>
     *                  <li>ip 登录用户客户端ip地址</li>
     *               </ul>
     * @throws Exception
     * @return ReturnMessage 返回的消息，子类如果不返回消息及状态码。cas将使用默认消息及状态码。
     */
    ReturnMessage process(Map<String, Object> params) throws Exception;
}
----

UserMapperService::
用户映射接口，用户在登陆本系统或第三方系统后，再去访问其它第三方系统时，需要提供一个用户映射的服务。子系统必须实现该接口，且提供用户的匹配映射。 `必须实现`
+
.UserMapperService
[source,java]
----
/**
 * 用户接口
 * @author zxb
 * @version 1.0.1
 * Created by zxb on 2016/3/16.
 */
public interface UserMapperService {

    /**
     * 根据用户账号获取该用户的信息，子系统实现该接口，便于各系统之间完成用户映射。此处只会被 dmcas 调用，且只会用于各系统间匹配校验。
     * @param userCode 用户账号
     * @return user 用户信息
     * @throws Exception
     */
    public User getUser(String userCode) throws Exception;

    /**
     * 根据其它系统提供的用户信息，返回本系统对应的用户信息。
     * @param user
     * @return
     * @throws Exception
     */
    public User getUser(User user) throws Exception;
}
----


=== 实现示例
==== AuthService
默认的用户名密码校验，采用的是对密码 _md5_ 后进行一个比较的校验。实现逻辑很简单，把密码 _md5_ 一把后和库中的 _md5_ 后的密码进行一个等值比较。

.MD5AuthService
[source,java]
----
public AuthResult validate(String username, String password) {
logger.info("begin validate user login info! username:" + username);
AuthResult authResult = new AuthResult();
if (!StringUtils.hasText(username) || !StringUtils.hasText(password)) {
    authResult.setValid(false);
    authResult.setMessage("用户名或密码不能为空！");
    return authResult;
}

Connection conn = null;
PreparedStatement ps = null;
ResultSet rs = null;
try {
    conn = dataSource.getConnection();
    ps = conn.prepareStatement(sql);
    ps.setString(1, username);
    rs = ps.executeQuery();
    String dbPassword = null;
    String flag = null;
    while (rs.next()) {
        dbPassword = rs.getString(1);
        flag = rs.getString(2);
    }
    if (!StringUtils.hasText(dbPassword)) {
        authResult.setValid(false);
        authResult.setMessage("用户不存在！");
        return authResult;
    }
    if (!dbPassword.equalsIgnoreCase(EncryptUtil.md5Degest(password))) {
        authResult.setValid(false);
        authResult.setMessage("用户或密码不正确！");
        return authResult;
    }
    if (!("1".equals(flag))) {
        authResult.setValid(false);
        authResult.setMessage("帐号已被禁用！");
        return authResult;
    }
    //获取登录用户信息
    User user = userService.queryByCodePassword(username, password);
    authResult.setUser(user);
    //验证是否成功
    authResult.setValid(true);
    return authResult;
} catch (Exception e) {
    logger.error("validate user:" + username + " error!", e);
    // 返回信息
    authResult.setValid(false);
    authResult.setMessage("验证失败！");
    return authResult;
} finally {
    this.release(rs, ps, conn);
    logger.info("begin validate user login info! username:" + username + ", validate:" + authResult.isValid() + ",msg:" + authResult.getMessage());
}
}
----

==== LoginPostProcessService
在用户登陆成功后，往往需要记录用户登陆行为的日志，刷新用户访问量等等。

_LoginPostProcessServiceImpl_ 实现了该接口，这里则是添加了一些子系统独有的一些逻辑。

[TIP]
====
接口方法返回的 _ReturnMessage_ 可以决定登陆成功后最终返回给客户端的信息，如 _ReturnCode_ 和 _ReturnMessage_
====

.LoginPostProcessServiceImpl
[source,java]
----
public class LoginPostProcessServiceImpl implements LoginPostProcessService {

    private Logger logger = Logger.getLogger(this.getClass());

    /**
     * 登录日志类型
     */
    private final String LOGIN_LOG_TYPE = "1001";

    /**
     * 日志服务接口
     */
    private LogService logService;

    /**
     * 参数列表
     */
    private ParamCache paramCache;

    public void setLogService(LogService logService) {
        this.logService = logService;
    }

    public void setParamCache(ParamCache paramCache) {
        this.paramCache = paramCache;
    }

    @Override
    public ReturnMessage process(Map<String, Object> params) throws Exception {
        logger.info("begin login success process!");
        ReturnMessage returnMessage = null;
        if (params != null && params.size() > 0) {
            // 记录用户登录日志
            User user = (User) params.get("user");
            String ip = params.get("ip").toString();

            logger.debug("create login log, user:" + user.getUser_code() + ", ip:" + ip);
            this.logService.createLog(user, ip, LOGIN_LOG_TYPE);

            // 更新门户登陆统计信息
            this.logService.update();

            // 验证用户密码是否为初始化密码
            String username = params.get("username").toString();
            String password = params.get("password").toString();
            String initial_password = paramCache.getValue("INITIAL_PASSWORD");
            if (!StringUtils.hasText(initial_password)) {
                logger.error("initial_password is empty,verify password will not effect!please check the table wmf_param!");
            } else {
                if (EncryptUtil.md5Degest(initial_password).equalsIgnoreCase(password)) {
                    returnMessage = new ReturnMessage();
                    returnMessage.setReturnCode("1");
                    returnMessage.setReturnMsg("您的密码还是初始化密码，请及时修改！");
                    logger.info("verify success!warn, the user " + username + "'s password is initial_password!");
                }
            }
        }
        logger.info("end login success process!");
        return returnMessage;
    }
}
----

==== LoginFailProcessService
_LoginFailProcessService_ 同 _LoginPostProcessService_ 接口类似，它在用户登陆失败时会调用。

_LoginFailProcessServiceImpl_ 实现了该接口，添加了一些日志记录的逻辑。

.LoginFailProcessServiceImpl
[source,java]
----
/**
 * 登录失败后的处理逻辑
 * Created by zxb on 2016/3/14.
 */
public class LoginFailProcessServiceImpl implements LoginFailProcessService {

    private Logger logger = Logger.getLogger(this.getClass());

    private MistakeLogService mistakeLogService;

    /**
     * 登录日志类型
     */
    private final String LOGIN_LOG_TYPE = "1001";

    public void setMistakeLogService(MistakeLogService mistakeLogService) {
        this.mistakeLogService = mistakeLogService;
    }

    @Override
    public ReturnMessage process(Map<String, Object> params) throws Exception {
        logger.info("begin login fail process!");
        if (params != null && params.size() > 0) {
            // 创建登录失败日志
            User user = (User) params.get("user");
            String ip = params.get("ip").toString();

            logger.debug("login fail user:" + (user == null ? "" : user.getUser_code()) + ", ip:" + ip);
            mistakeLogService.createLog(user, ip, LOGIN_LOG_TYPE);
        }
        logger.info("end login fail process!");
        return null;
    }
}
----

==== UserMapperService
_UserMapperService_ 作为各子系统间互相访问时的一个服务接口。它要求子系统实现它时，需要提供用户映射的服务。

_UserMapperServiceImpl_ 实现了该接口的两个方法。

.UserMapperServiceImpl
[source,java]
----
/**
 * 用户映射服务实现
 *
 * @author zxb
 * @version 1.0.1
 *          Created by zxb on 2016/3/17.
 */
public class UserMapperServiceImpl implements UserMapperService {

    private Logger logger = Logger.getLogger(this.getClass());

    /**
     * 用户操作接口
     */
    private UserService userService;

    /**
     * 设置用户操作接口
     */
    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    @Override
    public User getUser(String userCode) throws Exception {
        if (StringUtils.hasText(userCode)) {
            User user = this.userService.queryByCode(userCode);
            return user;
        }
        return null;
    }

    @Override
    public User getUser(User user) throws Exception {
        if (user == null || !StringUtils.hasText(user.getUser_code())) {
            logger.error("user is null or user_code is empty!");
            return null; // <1>
        }

        String userCode = user.getUser_code();
        String idCardNo = user.getUser_sfzh();
        logger.debug("other system's user, user_code " + userCode + ", idCardNo " + idCardNo);

        // 非普通用户，如一般的管理用户
        if (!StringUtils.hasText(idCardNo)) {
            logger.error("current user " + userCode + " does'nt has idCardNo!");
            return null; // 阻止无身份证号的用户进行访问
        }

        // 本系统中映射用户不存在时，则创建用户
        User mappingUser = this.userService.queryByNameSfzh(userCode, idCardNo);
        if (mappingUser == null) {
            mappingUser = this.userService.createPkiUser(userCode, userCode, idCardNo, "PKI001");
        }
        return mappingUser; // <2>
    }
}
----
<1> 没有匹配用户时，直接返回 _null_ 则可以。
<2> 存在用户，则返回匹配的用户即可。

=== 发布服务实现
子系统提供的实现在统一单点登录系统中是通过 _rpc_ 调用的，且采用的是较为成熟的 _dubbo_ 框架完成。子系统需要通过 _dubbo_ 将上述的实现类服务发布至注册中心即可。

==== 注册中心地址
注册中心采用的为 _zookeeper_ 集群。实际地址请联系湖北公安云项目组获取。

==== 发布服务
引入依赖::
. 手动引入
+
手动将以下 _jar_ 包加入工程 _classpath_ 下。
+
.dubbo依赖jar包
|===
|jar名称|版本号|备注
|dubbo|2.5.3|
|netty|3.2.5.Final|
|javassist|3.15.0-GA|
|log4j|1.2.16|
|commons-logging|1.1.1|
|spring|2.5.6.SEC03|可替换为spring3
|===
+
如果连接 _zookeeper_ 注册中心，则需要如下 _jar_ 包
+
.zookeeper client 依赖包
|===
|jar名称|版本号|备注
|zkclient|0.1|
|zookeeper|3.3.3|
|log4j|1.2.15|可替换为高版本
|jline|0.9.94|
|junit|3.8.1|
|===

. maven引入
+
[source,xml]
----
<!-- dubbo -->
<dependency>
    <groupId>com.alibaba</groupId>
    <artifactId>dubbo</artifactId>
    <version>2.5.3</version>
    <exclusions>
        <exclusion> // <1>
            <groupId>org.springframework</groupId>
            <artifactId>spring</artifactId>
        </exclusion>
    </exclusions>
</dependency>

<!-- zookeeper client -->
<dependency>
    <groupId>com.github.sgroschupf</groupId>
    <artifactId>zkclient</artifactId>
    <version>0.1</version>
</dependency>
----
<1> 如果工程已有 _spring_ 高版本的依赖，此处可排除 _spring_ 依赖，以免引起冲突

添加配置文件::
. dubbo基础环境配置文件
+
_dubbo.properties_ 文件为 _dubbo_ 的默认全局环境配置文件。
+
在工程的 _classpath_ 下添加 _dubbo.properties_ 文件，如下图。
+
image::dubbo-properties.png[]
+
编辑 _dubbo.properties_ 添加如下内容
+
[source,properties]
----
# 指定容器
dubbo.container=log4j,spring
dubbo.application.name=dmga-dubbo-validation
dubbo.application.owner=

# 指定注册中心地址
dubbo.registry.address=zookeeper://localhost:2181  // <1>
dubbo.registry.file=validation.cache

# 指定服务协议
dubbo.protocol.name=dubbo  //<2>
dubbo.protocol.port=-1
dubbo.protocol.accesslog=true

# 指定服务配置
dubbo.service.loadbalance=roundrobin
dubbo.service.group=jingzong  // <3>
dubbo.service.timeout=5000
dubbo.service.retries=0
dubbo.service.version=1.0   // <4>

# 指定spring文件加载位置
dubbo.spring.config=classpath:resource/beans/beans-*.xml // <5>

# 指定关闭钩子
dubbo.shutdown.hook=true
----
<1> 生产环境注册中心地址，请联系湖北公安云项目组获取
<2> 指定协议，建议使用 _dubbo_
<3> 指定服务所属组，必须指定
<4> 指定服务版本号，必须指定
<5> 如果为 _web_ 方式启动，此处不需要指定 _spring_ 配置文件路径

+
[TIP]
====
具体配置以 _dubbo_ 官网文档为准
====


. dubbo服务配置文件
+
在 _classpath_ 下添加 _spring_ 配置文件，例如：
+
[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://code.alibabatech.com/schema/dubbo
    http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!-- 校验服务实现,md5方式 -->
    <dubbo:service interface="com.dm.cas.server.service.AuthService" ref="md5AuthService"/>

    <!-- 登录成功后处理服务实现 -->
    <dubbo:service interface="com.dm.cas.server.service.LoginPostProcessService" ref="loginPostProcessService"/>

    <!-- 登录失败后的处理服务实现 -->
    <dubbo:service interface="com.dm.cas.server.service.LoginFailProcessService" ref="loginFailProcessService"/>

    <!-- 用户映射服务，默认实现 -->
    <dubbo:service interface="com.dm.cas.server.service.UserMapperService" ref="userMappingService" />

    <!-- 用户登出处理服务实现  -->
    <dubbo:service interface="com.dm.cas.server.service.LogoutProcessService" ref="logoutProcessService" /> // <1>
</beans>
----
<1> _ref_ 引用的为具体的 _spring bean_

启动服务::
启动服务时将上述配置的 _dubbo_ 相关的 _spring_ 配置文件加载起来即可。


[NOTE]
====
启动服务成功后，需要联系 _湖北公安云_ 项目组将需要接入单点的服务 _ip_ 或域名 添加至 *信任列表* 。
====
