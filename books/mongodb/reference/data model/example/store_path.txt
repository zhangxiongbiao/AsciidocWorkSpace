使用路径存储父节点，然后使使用正则查询父节点信息。

1. 插入测试数据
	
	db.categories.insert( { _id: "Books", path: null } )
	db.categories.insert( { _id: "Programming", path: ",Books," } )
	db.categories.insert( { _id: "Databases", path: ",Books,Programming," } )
	db.categories.insert( { _id: "Languages", path: ",Books,Programming," } )
	db.categories.insert( { _id: "MongoDB", path: ",Books,Programming,Databases," } )
	db.categories.insert( { _id: "dbm", path: ",Books,Programming,Databases," } )

2.	获取整颗树
	
	db.categories.find().sort( { path: 1 } )

3.	查找“Programing”的子节点

	db.categories.find( { path: /,Programming,/ } )

4.	查找“Books”的子节点，同时Books是顶级节点

	db.categories.find( { path: /^,Books,/ } )

5.	为path创建索引

	db.categories.createIndex({path: 1}, {name: "IDX_PATH"});	


1. This index may improve performance depending on the query:
For queries from the root Books sub-tree (e.g. /^,Books,/ or /^,Books,Programming,/), an index on the path field improves the query performance significantly.

2.	For queries of sub-trees where the path from the root is not provided in the query (e.g. /,Databases,/), or similar queries of sub-trees, where the node might be in the middle of the indexed string, the query must inspect the entire index.
For these queries an index may provide some performance improvement if the index is significantly smaller than the entire collection.	