== 创建 _Fragment_
:sectnums:

https://developer.android.com/training/basics/fragments/creating.html[本文地址]

https://developer.android.com/guide/components/fragments.html#Managing[Fragment API地址]

=== 摘要
image::images\createFragment-26283.png[]

使用 https://developer.android.com/tools/support-library/index.html[Support Libaray] 创建最低支持 _Android 1.6_ 版本的 _Fragment_ .

查看 https://developer.android.com/tools/support-library/setup.html[Support Library Setup] 来看如何引入 _Support Library_ .

=== 创建 _Fragment_

==== 创建 _Fragment_ 的布局xml
* 在 _res/layout_ 目录下添加一个布局xml文件。如
+
.Fragment布局XML示例
[source,xml]
----
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical" android:layout_width="match_parent"
    android:layout_height="match_parent">

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" android:text="@string/send"/>
</LinearLayout>
----
+
目录结构如：
+
image::images\createFragment-879c8.png[]

* 创建 _ArticleListFragment_ 类，继承于 _Fragment_ 类
+
[source,java]
----
public class ArticleListFragment extends Fragment {

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {
        return inflater.inflate(R.layout.article_list_fragement, container, false); // <1>
    }
}
----
<1> _R.layout.article_list_fragement_ 引用刚才创建的xml布局文件

=== 将 _Fragment_ 添加到 _Activity_ 中

==== 使用 _XML_ 将 _Fragment_ 添加到 _Activity_ 中
以 _MainActivity_ 为例，将 _Fragment_ 添加到activity_main布局 _XML_ 中。

.MainActivity类文件
[source,java]
----
package com.example.myapplication;

import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}
----

.activity_main.xml
[source,xml]
----
<?xml version="1.0" encoding="utf-8"?>
<android.support.constraint.ConstraintLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
    android:layout_height="match_parent" tools:context="com.example.myapplication.MainActivity">

    <fragment android:name="com.example.fragments.ArticleListFragment"
        android:id="@+id/list"
        android:layout_weight="1"
        android:layout_width="0dp"
        android:layout_height="match_parent" /> // <1>
</android.support.constraint.ConstraintLayout>
----
<1> _android:name_  必须为刚才创建的 _Fragment_ 类名。

==== 使用 _FragmentManager_ 类在代码中添加 _Fragment_.

修改 _MainActivity_ 使用代码引入 _Fragment_

.MainActivity类文件
[source,java]
----
public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // setContentView(R.layout.activity_main); // <1>

        FragmentManager fragmentManager = getFragmentManager();
        FragmentTransaction transaction = fragmentManager.beginTransaction(); // <2>
        Fragment fragment = new ArticleListFragment();
        transaction.add(android.R.id.content, fragment); // <3> <4>
        transaction.commit();
    }
}
----
<1> 不再使用 activity_main 布局了
<2> 开启事务
<3> _android.R.id.content_ 是引用的 _sdk_ 中内置的布局
<4> 此处还可以 _add_ 不带 _UI_ 布局的 _fragment_

[TIP]
====
使用 _add_ 另一个方法，可以添加不带 _UI_ 的 _fragment_ ， https://developer.android.com/guide/components/fragments.html#AddingWithoutUI[参考链接]
====

==== 使用 _replace_ 方法替换 _fragment_

[source,java]
----
ArticleReaderFragment articleReaderFragment = new ArticleReaderFragment();
        FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
        transaction.replace(R.id.fragment_container, articleReaderFragment);
        transaction.addToBackStack(null); // <1>
        transaction.commit();
----
<1> 允许用户回退到上一 _fragment_

== Fragment与Activity通讯

https://developer.android.com/training/basics/fragments/communicating.html#Deliver[示例链接]

=== Fragment中回调通知Activity

在 _Fragment_ 中定义接口， _Activity_ 中实现该接口，在 _OnAttached()_ 方法中绑定回调。

=== Activity调用Fragment

在 _Activity_ 中使用 _findFragmentById_ 查找该 _Activity_ 关联的 _fragment_ .

[source,java]
----
ArticleFragment articleFrag = (ArticleFragment)
                getSupportFragmentManager().findFragmentById(R.id.article_fragment);
----
