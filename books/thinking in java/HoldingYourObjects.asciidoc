= Holding Your Objects
:imagesDir: images

== Adding groups of elements

[source,java]
----
Collection<Integer> collection = new ArrayList<Integer>(Arrays.asList(1,2,3,4,5)); // <1> <2>

Collections.addAll(collection, 1,2,3,4,5); // <3>
----
<1> 使用构造函数装入其它 _Collection_
<2> _Arrays.asList_ 将数组转为固定数组的集合
<3> _Collections.addAll()_　为集合添加元素

[IMPORTANT]
====
_Arrays.asList()_ 返回的是一个固定长度的数组集合，其继承了AbstractList，其内部维持了一个固定的数组。
由于它没有重写父类的 _add_ 与　_remove_ 方法，所以 _Arrays.asList()_ 返回的 _List_ 调用 _add_ 或 _remove_ 方法将会出现错误。

.见 _Arrays_ 的嵌套类 _ArrayList_
image::ArraysAsList.png[]
====

=== Arrays.asList

[source,java]
----
package holding;//: holding/AsListInference.java
// Arrays.asList() makes its best guess about type.

import java.util.*;

class Snow {
}

class Powder extends Snow {
}

class Light extends Powder {
}

class Heavy extends Powder {
}

class Crusty extends Snow {
}

class Slush extends Snow {
}

public class AsListInference {
    public static void main(String[] args) {
        List<Snow> snow1 = Arrays.asList(
                new Crusty(), new Slush(), new Powder());

        // Won't compile:
        // List<Snow> snow2 = Arrays.asList( // <1>
        //   new Light(), new Heavy());
        // Compiler says:
        // found   : java.util.List<Powder>
        // required: java.util.List<Snow>

        // Collections.addAll() doesn't get confused:
        List<Snow> snow3 = new ArrayList<Snow>();
        Collections.addAll(snow3, new Light(), new Heavy()); // <2>

        // Give a hint using an
        // explicit type argument specification:
        List<Snow> snow4 = Arrays.<Snow>asList( // <3>
                new Light(), new Heavy());

        snow4.add(new Powder()); // <4>
    }
} ///:~
----
<1> 这里不能编译，父类 _Powder_ 不自动向上转型为 _Snow_
<2> 使用 _Collections.addAll()_ 不会存在 (1) 中的问题
<3> 使用 *Arrays.<Snow>asList* 可以强制转型
<4> 这里调用失败，不能给 _Arrays.asList()_ 返回的集合 _add_ 或 _remove_ 元素。

[source,java]
----
Exception in thread "main" java.lang.UnsupportedOperationException
	at java.util.AbstractList.add(AbstractList.java:131)
	at java.util.AbstractList.add(AbstractList.java:91)
	at holding.AsListInference.main(AsListInference.java:45)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
----

== Printing containers

