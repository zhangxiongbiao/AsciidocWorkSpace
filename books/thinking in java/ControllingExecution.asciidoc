= Controlling Execution

*if-else* , *while* , *do-while* , *for* , *return* , *break* , *switch*

== *True* and *False*
所有的条件语句都使用 *true* 或 *false* 来决定语句的执行。
[NOTE]
====
*Java* 不允许使用 *nubmer* 当作 *boolean*（在 *C* 或 *C++* 中会把 *0* 当作 *false* ，非 *0* 当作 *true*）。
====

== *if-else*
*if-else* 是使用最多的控制语句。 _else_ 是可选的。所以可以有以下两种方式使用 _if_ 。

.if
====
[source,java]
----
if(Boolean-expression)
  statement

or

if(Boolean-expression)
  statement
else
  statement
----
====

.if / else if /else
====
.example
[source,java]
----
package control;//: control/IfElse.java

import static net.mindview.util.Print.*;

public class IfElse {
    static int result = 0;

    static void test(int testval, int target) {
        if (testval > target)
            result = +1;
        else if (testval < target)
            result = -1;
        else
            result = 0; // Match
    }

    public static void main(String[] args) {
        test(10, 5);
        print(result);
        test(5, 10);
        print(result);
        test(5, 5);
        print(result);
    }
} /* Output:
1
-1
0
*///:~
----
====

== Iteration
循环， *while* 、 *do-while* 、 *for*

while::
+
[source,java]
----
while(Boolean-expression)
  statement
----
+
.WhileTest
[source,java]
----
package control;//: control/WhileTest.java
// Demonstrates the while loop.

public class WhileTest {
    static boolean condition() {
        boolean result = Math.random() < 0.99;
        System.out.print(result + ", ");
        return result;
    }

    public static void main(String[] args) {
        while (condition()) // <1>
            System.out.println("Inside 'while'");
        System.out.println("Exited 'while'");
    }
} /* (Execute to see output) *///:~
----
<1> 直到 `condition()` 为 _false_ 时才退出循环

do-while::
+
[source,java]
----
do
  statement
while(Boolean-expression);
----
+
_while_ 与 _do-while_ 的区别在于 _do-while_ 至少执行一次。

for::
+
[source,java]
----
for(initialization; Boolean-expression; step) // <1>
  statement
----
<1> _initialization_ 或 _Boolean-expression_ 或 _step_ 这三者均可为空。
+
.List Characters
[source,java]
----
package control;//: control/ListCharacters.java
// Demonstrates "for" loop by listing
// all the lowercase ASCII letters.

public class ListCharacters {
    public static void main(String[] args) {
        for (char c = 0; c < 128; c++)
            if (Character.isLowerCase(c))
                System.out.println("value: " + (int) c +
                        " character: " + c);
    }
} /* Output:
value: 97 character: a
value: 98 character: b
value: 99 character: c
value: 100 character: d
value: 101 character: e
value: 102 character: f
value: 103 character: g
value: 104 character: h
value: 105 character: i
value: 106 character: j
...
*///:~
----

=== The comma operator
在 _for_ 循环中，可以使用多个 _comma_ 。

.comma operator
[source,java]
----
package control;//: control/CommaOperator.java

public class CommaOperator {
  public static void main(String[] args) {
    for(int i = 1, j = i + 10; i < 5; i++, j = i * 2) { // <1>
      System.out.println("i = " + i + " j = " + j);
    }
  }
} /* Output:
i = 1 j = 11
i = 2 j = 4
i = 3 j = 6
i = 4 j = 8
*///:~
----
<1> 以逗号隔开，初始化多个相同类型的变量等。

== Foreach Syntax
*JavaSE~5~* 推出了更简洁的迭代 _Array_ 与 _Container_ 的 _for_ 语法，这也被称为 _foreach syntax_ 。不再需要初始化一个 *int* 类型变量来遍历整个序列， _foreach_ 直接将每次迭代的 _item_ 给你。


.foreach array
[source,java]
----
package control;//: control/ForEachFloat.java
import java.util.*;

public class ForEachFloat {
  public static void main(String[] args) {
    Random rand = new Random(47);
    float f[] = new float[10];
    for(int i = 0; i < 10; i++)
      f[i] = rand.nextFloat();
    for(float x : f) // <1>
      System.out.println(x);
  }
} /* Output:
0.72711575
0.39982635
0.5309454
0.0534122
0.16020656
0.57799757
0.18847865
0.4170137
0.51660204
0.73734957
*///:~
----
<1> 直接遍历了数组，并且每次迭代时将每一个 _item_ 给你。

.foreach char array
[source,java]
----
package control;//: control/ForEachString.java

public class ForEachString {
  public static void main(String[] args) {
    for(char c : "An African Swallow".toCharArray() ) // <1>
      System.out.print(c + " ");
  }
} /* Output:
A n   A f r i c a n   S w a l l o w
*///:~
----
<1> 迭代 _char_ 数组

[TIP]
====
_foreach_ 可以用于所有实现了 *Iterable* 接口的对象。
====


== *return*
*return* 关键字的用处：

. 指定方法的返回值（如果方法不是 _void_ ）
. 退出当前方法

[source,java]
----
package control;//: control/IfElse2.java
import static net.mindview.util.Print.*;

public class IfElse2 {
  static int test(int testval, int target) {
    if(testval > target)
      return +1;
    else if(testval < target)
      return -1;
    else
      return 0; // Match // <1>
  }
  public static void main(String[] args) {
    print(test(10, 5));
    print(test(5, 10));
    print(test(5, 5));
  }
} /* Output:
1
-1
0
*///:~
----
<1> 其实这里可以不再需要 _else_ ，因为 _return_ 执行后方法就结果了。

[TIP]
====
如果 _method_ 的返回值类型为 _void_ ，那么可以不用指定 _return_ 。

如果 _method_ 的返回值为明确的某一类型，那么就必须在方法中指定 _return_ 。
====

== *break* and *continue*
在循环内部可以通过 *break* 与 *continue* 控制循环。

[horizontal]
break:: 不再执行余下代码，并跳出当前循环。
continue:: 停止当前执行，并跳到循环开始处继续执行。

.Break and Continue
[source,java]
----
package control;//: control/BreakAndContinue.java
// Demonstrates break and continue keywords.
import static net.mindview.util.Range.*;

public class BreakAndContinue {
  public static void main(String[] args) {
    for(int i = 0; i < 100; i++) {
      if(i == 74) break; // Out of for loop
      if(i % 9 != 0) continue; // Next iteration
      System.out.print(i + " ");
    }
    System.out.println();
    // Using foreach:
    for(int i : range(100)) {
      if(i == 74) break; // Out of for loop
      if(i % 9 != 0) continue; // Next iteration
      System.out.print(i + " ");
    }
    System.out.println();
    int i = 0;
    // An "infinite loop":
    while(true) {
      i++;
      int j = i * 27;
      if(j == 1269) break; // Out of loop
      if(i % 10 != 0) continue; // Top of loop
      System.out.print(i + " ");
    }
  }
} /* Output:
0 9 18 27 36 45 54 63 72
0 9 18 27 36 45 54 63 72
10 20 30 40
*///:~
----

== The infamous “goto”

*goto* 是指如在条件A处跳到B处，条件B处又直接跳转到A处。

问题的本身不是使用 *goto* ，而是过度使用 *goto* ，最终导致程序控制流程惨不忍睹。其实某些特殊情况，使用 *goto* 是非常方便地能解决问题的。

[TIP]
====
*goto* 在 *java* 中是保留的关键字，而且也没有使用 *goto* 了。
====

在 *java* 中可以使用 _label_ 与 _break_ 或 _continue_ 来达到类似 _goto_ 的 _jump_ 效果。

label::
label就是一个标识符，以冒号结尾。
+
[source,java]
----
label1:{
  statement;
}

label2:
outer-iteration {
  inner-iteration {
    //...
    break; // <1>
    //...
    continue; // <2>
    //...
    continue label1; // <3>
    //...
    break label1; // <4>
  }
}
----
<1> break inner-iteration
<2> continue inner-iteration
<3> continue outer-iteration
<4> break outer-interation

使用 _label_ 最有用处的地方主要还是在循环中，因为 _break_ 与 _continue_ 只能跳出当前的循环，对付嵌套循环就不好办了。


.Labeled For
[source,java]
----
package control;//: control/LabeledFor.java
// For loops with "labeled break" and "labeled continue."
import static net.mindview.util.Print.*;

public class LabeledFor {
  public static void main(String[] args) {
    int i = 0;
    outer: // Can't have statements here
    for(; true ;) { // infinite loop
      inner: // Can't have statements here
      for(; i < 10; i++) {
        print("i = " + i);
        if(i == 2) {
          print("continue");
          continue;
        }
        if(i == 3) {
          print("break");
          i++; // Otherwise i never
               // gets incremented.
          break;
        }
        if(i == 7) {
          print("continue outer");
          i++; // Otherwise i never
               // gets incremented.
          continue outer;
        }
        if(i == 8) {
          print("break outer");
          break outer; // <1>
        }
        for(int k = 0; k < 5; k++) {
          if(k == 3) {
            print("continue inner");
            continue inner;
          }
        }
      }
    }
    // Can't break or continue to labels here
  }
} /* Output:
i = 0
continue inner
i = 1
continue inner
i = 2
continue
i = 3
break
i = 4
continue inner
i = 5
continue inner
i = 6
continue inner
i = 7
continue outer
i = 8
break outer
*///:~
----
<1> 如果跳转外层循环后，方法就结束了的话，也可以直接使用 _return_

.Labeled While
[source,java]
----
package control;//: control/LabeledWhile.java
// While loops with "labeled break" and "labeled continue."
import static net.mindview.util.Print.*;

public class LabeledWhile {
  public static void main(String[] args) {
    int i = 0;
    outer:
    while(true) {
      print("Outer while loop");
      while(true) {
        i++;
        print("i = " + i);
        if(i == 1) {
          print("continue");
          continue;
        }
        if(i == 3) {
          print("continue outer");
          continue outer;
        }
        if(i == 5) {
          print("break");
          break;
        }
        if(i == 7) {
          print("break outer");
          break outer;
        }
      }
    }
  }
} /* Output:
Outer while loop
i = 1
continue
i = 2
i = 3
continue outer
Outer while loop
i = 4
i = 5
break
Outer while loop
i = 6
i = 7
break outer
*///:~
----

[CAUTION]
====
不推荐使用 _label_ ，除非在遇到嵌套循环不好处理时。

使用 _label_ 将降低程序可读性、可分析性，使代码难维护。
====

== switch
*switch* 有时也被称为选择语句。

switch::
+
[source,java]
----
switch(integral-selector) {
  case integral-value1 : statement; break;
  case integral-value2 : statement; break; // <1>
  case integral-value3 : statement; break;
  case integral-value4 : statement; break;
  case integral-value5 : statement; break;
  // ...
  default: statement;
}
----
<1> _break_ 是可选的，如果没有 _break_ ，则会一直执行下面的 _case_ 直到遇到 _break_ 。
+
*swtich* 将 _integral-selector_ 与所有的 _case_ 进行比较。如果匹配，则执行对应的 _statement_ ，否则执行 _default statement_ 。


.VowelAndConsonants
[source,java]
----
package control;//: control/VowelsAndConsonants.java
// Demonstrates the switch statement.
import java.util.*;
import static net.mindview.util.Print.*;

public class VowelsAndConsonants {
  public static void main(String[] args) {
    Random rand = new Random(47);
    for(int i = 0; i < 100; i++) {
      int c = rand.nextInt(26) + 'a';
      printnb((char)c + ", " + c + ": ");
      switch(c) {
        case 'a':
        case 'e':
        case 'i':
        case 'o':
        case 'u': print("vowel");
                  break;
        case 'y':
        case 'w': print("Sometimes a vowel");
                  break;
        default:  print("consonant");
      }
    }
  }
} /* Output:
y, 121: Sometimes a vowel
n, 110: consonant
z, 122: consonant
b, 98: consonant
r, 114: consonant
n, 110: consonant
y, 121: Sometimes a vowel
g, 103: consonant
c, 99: consonant
f, 102: consonant
o, 111: vowel
w, 119: Sometimes a vowel
z, 122: consonant
...
*///:~
----

== Summary
