= Reusing Class

选择 _Composition_ 还是 _Inheritance_ 主要取决于你是否需要 _upcasting_ 。


== Final KeyWord

=== final data

使用 _static final_ 修饰的常量，命名时以全部大写，且多个单词以下划线分开。
使用 _final_ 修饰的常量不用大写，使用驼峰命名法即可。

_static final_::
_static_ 强调只有一个， _final_ 强调这是一个常量。

final data::
. 对基本类型使用 _final_ ，该变量值将不可被改变。
. 对引用类型变量使用 _final_ ，该引用的地址将不改被改变，即不改再将该引用指向其它对象。

=== Blank finals
blank finals::
即将 _fields_ 声明为 _final_ ，但是没有给定一个初始值，但是被 _blank finals_ 声明的变量必须在被使用前先完成初始化。

_blank finals_ 必须在变量定义或构造函数中完成初始化，这样也就保证了它在使用前一定完成了初始化。

=== final arguments
被 _final_ 修改的方法参数，在方法内部将不能修改该参数指向的值。


=== final methods

.使用 _final methods_ 的有两种原因
. 防止该方法被子类 _override_
. 在早期的 _jdk_ 中指定编译器优化该方法，现在的 _Jdk5+_ 已经不推荐使用

=== final and private
任何 _private_ 的方法其实算是隐式的 _final_ 方法，因为被 _private_ 修饰的方法不可被外部访问，也不可 _override_ 。你可以给 _private_ 修饰的方法添加一个 _final_ 关键字，但是这并不会起什么效果。

=== final classes
被 _final_ 修饰的 _class_ 将不可被继承，其中的 _method_ 也就被隐式地声明为了 _final_ 了， *但是其中的 _field_ 不受影响* ，即 _field_ 可声明为 _final_ 或非 _final_ ，此处参照 _final data_ 章节。

=== final caution


== Initialization and class loading

.类在JVM中的工作原理
要想使用一个Java类为自己工作，必须经过以下几个过程

. 类加载load：从字节码二进制文件——.class文件将类加载到内存，从而达到类的从硬盘上到内存上的一个迁移，所有的程序必须加载到内存才能工作。将内存中的class放到运行时数据区的方法区内，之后在堆区建立一个java.lang.Class对象，用来封装方法区的数据结构。这个时候就体现出了万事万物皆对象了，干什么事情都得有个对象。就是到了最底层究竟是鸡生蛋，还是蛋生鸡呢?类加载的最终产物就是堆中的一个java.lang.Class对象。

. 连接：连接又分为以下小步骤
验证：出于安全性的考虑，验证内存中的字节码是否符合JVM的规范，类的结构规范、语义检查、字节码操作是否合法、这个是为了防止用户自己建立一个非法的XX.class文件就进行工作了，或者是JVM版本冲突的问题，比如在JDK6下面编译通过的class(其中包含注解特性的类)，是不能在JDK1.4的JVM下运行的。
准备：将类的静态变量进行分配内存空间、初始化默认值。(对象还没生成呢，所以这个时候没有实例变量什么事情)
解析：把类的符号引用转为直接引用(保留)

. 类的初始化： 将类的静态变量赋予正确的初始值，这个初始值是开发者自己定义时赋予的初始值，而不是默认值。

而类的初始化则是在第一次访问该类时执行，且执行顺序如下：

. 父类静态代码块
. 子类静态代码块
. 父类非静态代码块
. 父类构造函数
. 子类非静态代码块
. 子类构造函数

一般来说就是类的 _static field_ 或 _static method_ 被访问到时就会初始化该类。其实构造函数也是一个特殊的 _static method_ ，只是没有被显示声明。
